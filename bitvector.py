# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bitvector
else:
    import _bitvector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def ones(n):
    return _bitvector.ones(n)
class BitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bits = property(_bitvector.BitVector_bits_get, _bitvector.BitVector_bits_set)
    data = property(_bitvector.BitVector_data_get, _bitvector.BitVector_data_set)
    block_counts = property(_bitvector.BitVector_block_counts_get, _bitvector.BitVector_block_counts_set)
    length_ = _bitvector.BitVector_length_

    def get(self, n):
        return _bitvector.BitVector_get(self, n)

    def set(self, n, b):
        return _bitvector.BitVector_set(self, n, b)

    def rank1(self, n):
        return _bitvector.BitVector_rank1(self, n)

    def rangeRank1(self, lo, hi):
        return _bitvector.BitVector_rangeRank1(self, lo, hi)

    def insert(self, *args):
        return _bitvector.BitVector_insert(self, *args)

    def append(self, _from, lo, hi):
        return _bitvector.BitVector_append(self, _from, lo, hi)

    def erase(self, lo, hi):
        return _bitvector.BitVector_erase(self, lo, hi)

    def size(self):
        return _bitvector.BitVector_size(self)

    def __init__(self, *args):
        _bitvector.BitVector_swiginit(self, _bitvector.new_BitVector(*args))

    def memoryUsage(self):
        return _bitvector.BitVector_memoryUsage(self)

    def hello(self):
        return _bitvector.BitVector_hello(self)
    __swig_destroy__ = _bitvector.delete_BitVector

# Register BitVector in _bitvector:
_bitvector.BitVector_swigregister(BitVector)
cvar = _bitvector.cvar
ONE_BITS = cvar.ONE_BITS



