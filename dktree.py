# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dktree
else:
    import _dktree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dktree.delete_SwigPyIterator

    def value(self):
        return _dktree.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dktree.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dktree.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dktree.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dktree.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dktree.SwigPyIterator_copy(self)

    def next(self):
        return _dktree.SwigPyIterator_next(self)

    def __next__(self):
        return _dktree.SwigPyIterator___next__(self)

    def previous(self):
        return _dktree.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dktree.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dktree.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dktree.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dktree.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dktree.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dktree.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dktree.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dktree:
_dktree.SwigPyIterator_swigregister(SwigPyIterator)

class ULongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dktree.ULongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dktree.ULongVector___nonzero__(self)

    def __bool__(self):
        return _dktree.ULongVector___bool__(self)

    def __len__(self):
        return _dktree.ULongVector___len__(self)

    def __getslice__(self, i, j):
        return _dktree.ULongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dktree.ULongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dktree.ULongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dktree.ULongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dktree.ULongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dktree.ULongVector___setitem__(self, *args)

    def pop(self):
        return _dktree.ULongVector_pop(self)

    def append(self, x):
        return _dktree.ULongVector_append(self, x)

    def empty(self):
        return _dktree.ULongVector_empty(self)

    def size(self):
        return _dktree.ULongVector_size(self)

    def swap(self, v):
        return _dktree.ULongVector_swap(self, v)

    def begin(self):
        return _dktree.ULongVector_begin(self)

    def end(self):
        return _dktree.ULongVector_end(self)

    def rbegin(self):
        return _dktree.ULongVector_rbegin(self)

    def rend(self):
        return _dktree.ULongVector_rend(self)

    def clear(self):
        return _dktree.ULongVector_clear(self)

    def get_allocator(self):
        return _dktree.ULongVector_get_allocator(self)

    def pop_back(self):
        return _dktree.ULongVector_pop_back(self)

    def erase(self, *args):
        return _dktree.ULongVector_erase(self, *args)

    def __init__(self, *args):
        _dktree.ULongVector_swiginit(self, _dktree.new_ULongVector(*args))

    def push_back(self, x):
        return _dktree.ULongVector_push_back(self, x)

    def front(self):
        return _dktree.ULongVector_front(self)

    def back(self):
        return _dktree.ULongVector_back(self)

    def assign(self, n, x):
        return _dktree.ULongVector_assign(self, n, x)

    def resize(self, *args):
        return _dktree.ULongVector_resize(self, *args)

    def insert(self, *args):
        return _dktree.ULongVector_insert(self, *args)

    def reserve(self, n):
        return _dktree.ULongVector_reserve(self, n)

    def capacity(self):
        return _dktree.ULongVector_capacity(self)
    __swig_destroy__ = _dktree.delete_ULongVector

# Register ULongVector in _dktree:
_dktree.ULongVector_swigregister(ULongVector)

class VectorData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    entry = property(_dktree.VectorData_entry_get)
    start = property(_dktree.VectorData_start_get, _dktree.VectorData_start_set)
    end = property(_dktree.VectorData_end_get, _dktree.VectorData_end_set)
    iteration = property(_dktree.VectorData_iteration_get, _dktree.VectorData_iteration_set)
    firstAt = property(_dktree.VectorData_firstAt_get, _dktree.VectorData_firstAt_set)

    def __init__(self, *args):
        _dktree.VectorData_swiginit(self, _dktree.new_VectorData(*args))
    __swig_destroy__ = _dktree.delete_VectorData

# Register VectorData in _dktree:
_dktree.VectorData_swigregister(VectorData)

class DKTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    findings = property(_dktree.DKTree_findings_get, _dktree.DKTree_findings_set)
    findings_index = property(_dktree.DKTree_findings_index_get, _dktree.DKTree_findings_index_set)
    findings_global = property(_dktree.DKTree_findings_global_get, _dktree.DKTree_findings_global_set)

    def __init__(self, *args):
        _dktree.DKTree_swiginit(self, _dktree.new_DKTree(*args))
    __swig_destroy__ = _dktree.delete_DKTree

    def get_findings_global(self):
        return _dktree.DKTree_get_findings_global(self)

    def addEdge(self, row, column):
        return _dktree.DKTree_addEdge(self, row, column)

    def removeEdge(self, row, column):
        return _dktree.DKTree_removeEdge(self, row, column)

    def insertEntry(self):
        return _dktree.DKTree_insertEntry(self)

    def deleteEntry(self, a):
        return _dktree.DKTree_deleteEntry(self, a)

    def reportAllEdges(self, A, B):
        return _dktree.DKTree_reportAllEdges(self, A, B)

    def reportEdge(self, a, b):
        return _dktree.DKTree_reportEdge(self, a, b)

    def printtt(self):
        return _dktree.DKTree_printtt(self)

    def memoryUsage(self):
        return _dktree.DKTree_memoryUsage(self)

    @staticmethod
    def withSize(size):
        return _dktree.DKTree_withSize(size)

# Register DKTree in _dktree:
_dktree.DKTree_swigregister(DKTree)

def DKTree_withSize(size):
    return _dktree.DKTree_withSize(size)



